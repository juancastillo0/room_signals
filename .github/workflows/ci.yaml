name: CI

on:
  push:
  pull_request:

jobs:
  analyze:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, ubuntu-22.04]
        sdk: [stable, beta]
    steps:
      - uses: actions/checkout@v2
      - uses: dart-lang/setup-dart@v1.3
        with:
          sdk: ${{ matrix.sdk }}

      - run: dart pub global activate webdev

      - id: install_client
        name: Install dependencies
        run: dart pub get --directory=room_signals_client

      - id: install_web_client
        name: Install dependencies
        run: dart pub get --directory=web_client

      - id: install
        name: Install dependencies
        run: dart pub get

      - name: Verify formatting
        run: dart format --output=none --set-exit-if-changed .
        if: always()

      - name: Run code generation client
        run: dart pub run --directory=room_signals_client build_runner build --delete-conflicting-outputs
        if: always() && steps.install_client.outcome == 'success'

      - name: Run code generation
        run: dart pub run build_runner build --delete-conflicting-outputs
        if: always() && steps.install.outcome == 'success'

      - name: Analyze project source
        run: dart analyze
        if: always() && steps.install.outcome == 'success'

      - id: test
        name: Run tests
        run: dart test
        if: always() && steps.install.outcome == 'success'

      - id: build_web
        name: Build web client
        run: cd web_client && webdev build --release --output web:build -- '--define=build_web_compilers:dart2js=environment={"ENDPOINT_BASE":"https://juancastillo.xyz"}'
        if: always() && steps.install_web_client.outcome == 'success'

      - id: compile
        name: Compile binary
        run: dart compile exe bin/server.dart --output web_client/build/server
        if: always() && steps.install.outcome == 'success'

      - name: Upload binary
        uses: peaceiris/actions-gh-pages@v3
        if: matrix.os == 'ubuntu-22.04' && matrix.sdk == 'stable' && github.ref_name == 'main' && github.event_name == 'push'
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./web_client/build

      # - id: coverage
      #   name: Collect and report coverage
      #   run: melos run coverage
      #   if: always() && steps.install.outcome == 'success'
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v2
      #   if: always() && steps.coverage.outcome == 'success'
      #   with:
      #     fail_ci_if_error: true
      #     files: "*/coverage/lcov.info"
      # - name: Upload leto coverage to Coveralls
      #   uses: coverallsapp/github-action@master
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     base-path: leto
      #     path-to-lcov: "./leto/coverage/lcov.info"
      #     flag-name: leto
      #     parallel: true

  # Check Markdown links
  # markdown-link-check:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - uses: gaurav-nelson/github-action-markdown-link-check@v1
  #       with:
  #         base-branch: main
  #         config-file: md_link_check.json
